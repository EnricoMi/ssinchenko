<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Ai on Sem Sinchenko</title>
    <link>http://localhost:1313/ssinchenko/categories/ai/</link>
    <description>Recent content in Ai on Sem Sinchenko</description>
    <image>
      <title>Sem Sinchenko</title>
      <url>http://localhost:1313/ssinchenko/images/avatar-favicon.png</url>
      <link>http://localhost:1313/ssinchenko/images/avatar-favicon.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 06 Apr 2023 14:11:05 +0200</lastBuildDate>
    <atom:link href="http://localhost:1313/ssinchenko/categories/ai/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Generating docstrings with GPT</title>
      <link>http://localhost:1313/ssinchenko/post/generating-docs-with-gpt/</link>
      <pubDate>Thu, 06 Apr 2023 14:11:05 +0200</pubDate>
      <guid>http://localhost:1313/ssinchenko/post/generating-docs-with-gpt/</guid>
      <description>Generating Python docstrings with GPT and Emacs Motivation There is an open source library in which I&amp;#39;m a maintainer. And recently I committed to creating docstrings for all the public functions and methods. I heard that recent Large Language Models (LLM) are good enough in the annotation of texts and documenting of code so I decided to try to use one of OpenAI models to solve this problem. In this post I will use Emacs plugins and extensions to generate docstrings but most advises about which prompt is better to use are generic and may be used with different code editors and IDE&amp;#39;s.</description>
    </item>
  </channel>
</rss>
